package com.cams.day4;

import com.cams.day4.bean.Employee;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;

public class CrudDemo1 {

    private static final Scanner scanner = new Scanner(System.in);
    private static final List<Employee> employeeList = new ArrayList<>();

    public static void main(String[] args) {
        int choice;
        do {
            System.out.println("\nWelcome to Employee CRUD Program");
            System.out.println("\t\t\t 1. View All Employees");
            System.out.println("\t\t\t 2. View Employee By ID");
            System.out.println("\t\t\t 3. View Active Employees");
            System.out.println("\t\t\t 4. Add New Employee");
            System.out.println("\t\t\t 5. Update an Employee");
            System.out.println("\t\t\t 6. Delete an Employee");
            System.out.println("\t\t\t 7. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    viewAllEmployees();
                    break;
                case 2:
                    viewEmployeeById();
                    break;
                case 3:
                    viewActiveEmployees();
                    break;
                case 4:
                    addEmployee();
                    break;
                case 5:
                    updateEmployee();
                    break;
                case 6:
                    deleteEmployee();
                    break;
                case 7:
                    System.out.println("Exiting... Thank you!");
                    break;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        } while (choice != 7);
        scanner.close();
    }

    // Method to add new employee
    private static void addEmployee() {
        Employee emp = new Employee();

        System.out.print("Enter ID: ");
        emp.setId(scanner.nextInt());

        System.out.print("Enter Name: ");
        emp.setName(scanner.next());

        System.out.print("Enter Email: ");
        emp.setEmail(scanner.next());

        System.out.print("Enter Mobile: ");
        emp.setMobile(scanner.nextLong());

        System.out.print("Is Active [0/1]: ");
        emp.setActive(scanner.nextInt() == 1);

        System.out.print("Enter Birthdate (yyyy-MM-dd): ");
        String dateInput = scanner.next();
        try {
            LocalDate dob = LocalDate.parse(dateInput, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            emp.setBirthDate(dob);
        } catch (DateTimeParseException e) {
            System.out.println("Invalid date format. Setting today's date as default.");
            emp.setBirthDate(LocalDate.now());
        }

        employeeList.add(emp);
        System.out.println("Employee added successfully!");
    }

    // View all employees
    private static void viewAllEmployees() {
        if (employeeList.isEmpty()) {
            System.out.println("No employees found.");
        } else {
            for (Employee emp : employeeList) {
                System.out.println(emp);
            }
        }
    }

    // View employee by ID
    private static void viewEmployeeById() {
        System.out.print("Enter Employee ID: ");
        int id = scanner.nextInt();
        for (Employee emp : employeeList) {
            if (emp.getId() == id) {
                System.out.println(emp);
                return;
            }
        }
        System.out.println("Employee not found.");
    }

    // View only active employees
    private static void viewActiveEmployees() {
        boolean found = false;
        for (Employee emp : employeeList) {
            if (emp.isActive()) {
                System.out.println(emp);
                found = true;
            }
        }
        if (!found) {
            System.out.println("No active employees found.");
        }
    }

    // Update employee
    private static void updateEmployee() {
        System.out.print("Enter Employee ID to update: ");
        int id = scanner.nextInt();
        for (Employee emp : employeeList) {
            if (emp.getId() == id) {
                System.out.print("Enter new name: ");
                emp.setName(scanner.next());

                System.out.print("Enter new email: ");
                emp.setEmail(scanner.next());

                System.out.print("Enter new mobile: ");
                emp.setMobile(scanner.nextLong());

                System.out.print("Is Active [0/1]: ");
                emp.setActive(scanner.nextInt() == 1);

                System.out.print("Enter new birthdate (yyyy-MM-dd): ");
                try {
                    LocalDate dob = LocalDate.parse(scanner.next(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                    emp.setBirthDate(dob);
                } catch (DateTimeParseException e) {
                    System.out.println("Invalid date format. Keeping old date.");
                }

                System.out.println("Employee updated successfully.");
                return;
            }
        }
        System.out.println("Employee not found.");
    }

    // Delete employee
    private static void deleteEmployee() {
        System.out.print("Enter Employee ID to delete: ");
        int id = scanner.nextInt();
        Iterator<Employee> iterator = employeeList.iterator();
        while (iterator.hasNext()) {
            if (iterator.next().getId() == id) {
                iterator.remove();
                System.out.println("Employee deleted successfully.");
                return;
            }
        }
        System.out.println("Employee not found.");
    }
}
